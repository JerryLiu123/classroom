<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd" default-lazy-init="true">
    <description>配置主-从数据源信息</description>
    <!-- com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean -->
    <bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close" abstract="true">  
       <property name="xaDataSourceClassName" value="${jdbc.xaDataSourceClassName}"/>  <!-- SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana]  -->
       <property name="poolSize" value="10" />  
       <property name="minPoolSize" value="10"/>  
       <property name="maxPoolSize" value="30"/>  
       <property name="borrowConnectionTimeout" value="60"/>  
       <property name="reapTimeout" value="20"/>  
       <property name="maxIdleTime" value="60"/>  
       <property name="maintenanceInterval" value="60"/>  
       <property name="loginTimeout" value="60"/>  
       <property name="testQuery" value="${validationQuery}"/>  
    </bean>  
    <bean id="masterDataSource" parent="abstractXADataSource">  
        <property name="uniqueResourceName" value="masterDB" />  
        <property name="xaProperties">
            <props>
                <prop key="driverClassName">${jdbc.driverClassName}</prop>
                <prop key="url">${master.jdbc.url}</prop>
                <prop key="password">${jdbc.password}</prop>
                 <!--  <prop key="user">${jdbc.username}</prop> --> <!-- mysql -->
                <prop key="username">${jdbc.username}</prop>   <!-- durid -->
                <prop key="initialSize">0</prop>
                <prop key="maxActive">20</prop> <!-- 若不配置则代码执行"{dataSource-1} inited"此处停止  -->
                <prop key="minIdle">0</prop>
                <prop key="maxWait">60000</prop>
                <prop key="validationQuery">${validationQuery}</prop>
                <prop key="testOnBorrow">false</prop>
                <prop key="testOnReturn">false</prop>
                <prop key="testWhileIdle">true</prop>
                <prop key="removeAbandoned">true</prop>
                <prop key="removeAbandonedTimeout">1800</prop>
                <prop key="logAbandoned">true</prop>
                <prop key="filters">mergeStat</prop>
            </props>
        </property>
    </bean>  
    <bean id="slaveDataSource" parent="abstractXADataSource">  
        <property name="uniqueResourceName" value="slaveDB" />  
        <property name="xaProperties">
            <props>
                <prop key="driverClassName">${jdbc.driverClassName}</prop>
                <prop key="url">${slave.jdbc.url}</prop>
                <prop key="password">${jdbc.password}</prop>
                <!--  <prop key="user">${jdbc.username}</prop> -->
                <prop key="username">${jdbc.username}</prop>
                <prop key="initialSize">0</prop>
                <prop key="maxActive">20</prop>
                <prop key="minIdle">0</prop>
                <prop key="maxWait">60000</prop>
                <prop key="validationQuery">${validationQuery}</prop>
                <prop key="testOnBorrow">false</prop>
                <prop key="testOnReturn">false</prop>
                <prop key="testWhileIdle">true</prop>
                <prop key="removeAbandoned">true</prop>
                <prop key="removeAbandonedTimeout">1800</prop>
                <prop key="logAbandoned">true</prop>
                <prop key="filters">mergeStat</prop>
            </props>
        </property>
    </bean> 

	<!-- 配置数据源 -->
<!--  	<bean name="masterDataSource" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean" init-method="init"  
          destroy-method="close">
        <property name="uniqueResourceName" value="atomikosNonXADS1" />  
        <property name="driverClassName" value="${driverClassName}" />  
        <property name="url" value="${jdbc_url}" />  
        <property name="user" value="${jdbc_username}" />  
        <property name="password" value="${jdbc_password}" />  
        <property name="poolSize" value="5" />  
        <property name="minPoolSize" value="10"/>  
        <property name="maxPoolSize" value="30"/> 
        <property name="borrowConnectionTimeout" value="60" /> 	
        <property name="reapTimeout" value="20"/>  
        <property name="maxIdleTime" value="60"/>  
        <property name="maintenanceInterval" value="60"/>  
        <property name="loginTimeout" value="60"/>  
        <property name="testQuery">  
            <value>select 1</value>  
        </property> 
	</bean>
	<bean name="slaveDataSource" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean" init-method="init"  
          destroy-method="close">
	    <property name="uniqueResourceName" value="atomikosNonXADS2" />  
        <property name="driverClassName" value="${driverClassName}" />  
        <property name="url" value="${jdbc_url2}" />  
        <property name="user" value="${jdbc_username}" />  
        <property name="password" value="${jdbc_password}" />  
        <property name="poolSize" value="5" />  
        <property name="minPoolSize" value="10"/>  
        <property name="maxPoolSize" value="30"/> 
        <property name="borrowConnectionTimeout" value="60" /> 	
        <property name="reapTimeout" value="20"/>  
        <property name="maxIdleTime" value="60"/>  
        <property name="maintenanceInterval" value="60"/>  
        <property name="loginTimeout" value="60"/>  
        <property name="testQuery">  
            <value>select 1</value>  
        </property>
	</bean> -->

	<!-- 使用 AbstractRoutingDataSource 动态切换数据源，但是在加事务的方法中无法切换，也就是说一个事务只能使用一个数据源,怎么解决还在寻找方法 -->
<!-- 	<bean id="dataSource" class="com.classroom.wnn.util.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="masterDataSource" key="dataMySQL1"></entry>
				<entry value-ref="slaveDataSource" key="dataMySQL2"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterDataSource"></property>      默认使用masterDataSource的数据源
	</bean> -->

	<!-- masterDataSource数据源与mybatis绑定配置开始 -->
	<!-- 绑定myBatis的 xml 文件 -->
	<bean id="masterSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="masterDataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/classroom/wnn/mapper/*.xml</value>
			</list>
		</property>
	</bean>
	<!-- 将dao接口和xml进行绑定 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.classroom.wnn.dao,com.classroom.wnn.dao.*" />
		<property name="sqlSessionFactoryBeanName" value="masterSessionFactory" />
	</bean>
	<!-- masterDataSource数据源与mybatis绑定配置结束 -->
	
	
	<!-- slaveDataSource数据源与mybatis绑定配置开始 -->
	<!-- 绑定myBatis的 xml 文件 -->
	<bean id="slaveSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="slaveDataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/classroom/wnn/mapper/mapperslave/*.xml</value>
			</list>
		</property>
	</bean>
	<!-- 将dao接口和xml进行绑定 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.classroom.wnn.daoslave,com.classroom.wnn.daoslave.*" />
		<property name="sqlSessionFactoryBeanName" value="slaveSessionFactory" />
	</bean>
	<!-- slaveDataSource数据源与mybatis绑定配置结束 -->

	<!-- 以下为事物配置 -->
  	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"  
        init-method="init" destroy-method="close">  
        <property name="forceShutdown">  
            <value>true</value>  
        </property>  
    </bean>
  
  	<!-- 事务默认超时时间 -->
     <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">  
        <property name="transactionTimeout" value="300" />  
    </bean> 
  
  	<!-- jta事物管理器 -->
     <bean id="transactionManager"  
        class="org.springframework.transaction.jta.JtaTransactionManager">  
        <property name="transactionManager">  
            <ref bean="atomikosTransactionManager" />  
        </property>  
        <property name="userTransaction">  
            <ref bean="atomikosUserTransaction" />  
        </property>  
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean>
    
      
	<!-- 配置事务管理器 -->
<!--  	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean> -->

	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 事物配置结束 -->
	
	<!-- 配置druid监控spring jdbc -->
<!--  	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.classroom.wnn.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config> -->
</beans>